#include "io.h"
#include "gic.h"

void (*saved_callback)(u32 btn);

XGpio btnport;
/*
 * initialize the btns providing a callback
 */
void io_btn_init(void (*btn_callback)(u32 btn))
{
	saved_callback = btn_callback;

	gic_init();

	XGpio_Initialize(&btnport, XPAR_AXI_GPIO_1_DEVICE_ID);

	XGpio_InterruptDisable(&btnport, XGPIO_IR_CH1_MASK);

	gic_connect(XPAR_FABRIC_GPIO_1_VEC_ID, (Xil_ExceptionHandler) btn_handler, &btnport);

	XGpio_InterruptEnable(&btnport, XGPIO_IR_CH1_MASK);

	XGpio_InterruptGlobalEnable(&btnport);


	u32 btn = XGpio
	saved_callback();
}

/*
 * close the btns
 */
void io_btn_close(void);


/*
 * initialize the switches providing a callback
 */
void io_sw_init(void (*sw_callback)(u32 sw));

/*
 * close the switches
 */
void io_sw_close(void);

void btn_handler(void *devicep) {
	XGpio *dev = (XGpio*)devicep;

	if (buttonPushed == false) {
		/* coerce the generic pointer into a gpio */
		u32 button = XGpio_DiscreteRead(dev, CHANNEL1);
		if (button == 1){
			led_toggle(0);
		} else if (button == 2){
			led_toggle(1);
		} else if (button == 4){
			led_toggle(2);
		} else if (button == 8){
			led_toggle(3);
		}
//		printf("button %ld", button);
//		pushes++;
//		printf(".");
		fflush(stdout);
		buttonPushed = true;
	} else {
		buttonPushed = false;
	}
	XGpio_InterruptClear(dev, XGPIO_IR_CH1_MASK | 0x1);

}
